name: Version and Release Product

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type (patch, minor, major, or prerelease)'
        required: true
        default: 'prerelease'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  version-and-release:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          # this will checkout the branch that triggered the workflow
          ref: ${{ github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Yarn
        run: corepack enable

      - name: Install dependencies
        run: yarn install

      - name: Configure Git
        run: |
          git config user.name "${GITHUB_ACTOR}"
          git config user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      - name: Validate new version
        run: |
          # get current version before bump
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "CURRENT_VERSION=$CURRENT_VERSION"

          # simulate version bump to check new version
          NEW_VERSION=$(yarn version ${{ github.event.inputs.bump_type }} --dry-run 2>&1 | grep -oE '[0-9]+\.[0-9]+\.[0-9]+(-(-[0-9]+)?(\.[0-9]+)?)?')
          echo "NEW_VERSION=$NEW_VERSION"

          # check if version tag already exists
          if git tag | grep -q "^v$NEW_VERSION$"; then
            echo "Error: Version v$NEW_VERSION already exists as a tag"
            exit 1
          fi

      - name: Bump version
        id: version_bump
        run: |
          # perform actual version bump
          yarn version ${{ github.event.inputs.bump_type }}

          # get new version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Build project
        run: |
          if ! yarn build; then
            echo "Error: Build failed"
            exit 1
          fi

      - name: Create Sentry release
        run: |
          VERSION=${{ steps.version_bump.outputs.NEW_VERSION }}
          echo "Creating sentry release for Version: $VERSION"

          # create new release
          if ! yarn sentry-cli releases new "$VERSION"; then
            echo "Error: Sentry release creation failed"
            exit 1
          fi

          # upload sourcemaps
          if ! yarn sentry-cli releases files "$VERSION" upload-sourcemaps ./.vercel/output/; then
            echo "Error: Sentry sourcemaps upload failed"
            # attempt to delete the release since it failed
            yarn sentry-cli releases delete "$VERSION" || true
            exit 1
          fi

          # finalize release
          if ! yarn sentry-cli releases finalize "$VERSION"; then
            echo "Error: Sentry release finalization failed"
            # attempt to delete the release since it failed
            yarn sentry-cli releases delete "$VERSION" || true
            exit 1
          fi

          echo "Sentry release created successfully"

      - name: Push changes
        run: |
          # push version bump commit
          if ! git push origin HEAD:${{ github.ref }}; then
            echo "Error: Failed to push version bump to branch ${{ github.ref }}"
            exit 1
          fi

          # push version tag
          if ! git push origin --tags; then
            echo "Error: Failed to push version tag to branch ${{ github.ref }}"
            exit 1
          fi
      - name: Workflow summary
        if: always()
        run: |
          echo "## Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "- Version: ${{ steps.version_bump.outputs.NEW_VERSION }}" >> $GITHUB_STEP_SUMMARY
          echo "- Branch: ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- Bump Type: ${{ github.event.inputs.bump_type }}" >> $GITHUB_STEP_SUMMARY
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
  SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
  SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
